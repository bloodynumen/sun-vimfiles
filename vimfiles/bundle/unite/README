This is a mirror of http://www.vim.org/scripts/script.php?script_id=3396

==============================================================================
INTRODUCTION					*unite-introduction*

*unite* or *unite.vim* searches and displays information from arbitrary sources
like files, buffers, recently used files or registers. You can run one of
defined actions on a target displayed.

The differences between |unite| and similar plugins like |fuzzyfinder| or |ku|
are that |unite| doesn't use the built-in completion interface of Vim, and
integrates sources at the same time.

==============================================================================
USAGE						*unite-usage*

	In case when you run with files and buffers as the source
>
	:Unite file buffer
<

	In case when you run with the initial input value foo
>
	:Unite -input=foo file
<

The unite you started splits the window horizontally by default, opening on
the top of the Vim.  For example,
>
	:Unite file
<
lists up the files in the current directory.  You may choose one of the
candidates by moving j or k, and typing Enter key opens the candidate in a new
buffer.  That's the default action for candidates of which the kind is file.
You may also select an action with <Tab> on a candidate.  See also
|unite-action| about the actions.

You can narrow down the candidates with a keyword.  After opening a unite
window, the cursor goes on the right side of > in the 2nd line by typing i.
Then you can input a keyword to narrow down the candidates.  Each single
characters you type narrows down the candidates.  You can also use a wild
card * as an arbitrary character sequence.  For example
>
	*hisa
<
matches hisa, ujihisa, or ujihisahisa.  Furthermore, two consequence wild cards
matches directory recursively.  For example
>
	**/foo
<
matches bar/foo or buzz/bar/foo.  Note that you should consider using
|file_rec| in most cases that will be described bellow.

You may specify multiple keywords to narrow down, separating by spaces.
>
	foo bar
<
That matches candidates that meet both foo and bar.

OR matching is implemented by "|".
>
	foo|bar
<
You may specify negative conditions with !.
>
	foo !bar
<
That matches candidates that meet foo but doesn't meet bar.

	Wild cards are added automatically with / if you specify files on
	-buffer-name option.  That's handy in case you select file with unite.
>
	:Unite -buffer-name=files file
<
See also |unite_default_key_mappings| for other actions.

Screencast is available. Thanks ujihisa!
http://www.ustream.tv/recorded/11240673


